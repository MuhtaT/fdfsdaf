"use client"

import { useState } from "react"
import { STICKERS, type StickerType } from "@/lib/stickers"

interface TelegramStickerProps {
  sticker: StickerType
  size?: number
  className?: string
  loop?: boolean // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–ø—Å loop
}

const EMOJI_FALLBACKS: Record<StickerType, string> = {
  DUCK_LAUGH: "üòÇ",
  DUCK_HEART: "ü•∞", 
  DUCK_WAVE: "üëã",
  DUCK_RAIN: "üò¢",
  DUCK_LOADING: "‚è≥",
  DUCK_PLANE: "‚úàÔ∏è",
}

export default function TelegramSticker({
  sticker,
  size = 120,
  className = "",
  loop = true, // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º
}: TelegramStickerProps) {
  const [hasError, setHasError] = useState(false)

  const gifPath = STICKERS[sticker].replace('.tgs', '.gif')
  
  if (hasError) {
    return (
      <div 
        className={`inline-flex items-center justify-center bg-gradient-to-br from-avito-primary/10 to-avito-accent/10 rounded-2xl border-2 border-avito-primary/20 ${className}`}
        style={{ width: size, height: size }}
        title={`${sticker} (fallback)`}
      >
        <span style={{ fontSize: size * 0.4 }}>
          {EMOJI_FALLBACKS[sticker]}
        </span>
      </div>
    )
  }

  return (
    <div className={`inline-block rounded-lg overflow-hidden ${className}`} style={{ width: size, height: size }}>
      <img
        src={gifPath}
        alt={sticker}
        className="w-full h-full object-cover"
        onError={() => setHasError(true)}
        style={{ 
          width: '100%',
          height: '100%',
          display: 'block',
          // ‚úÖ –î–ª—è GIF –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –Ω–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å CSS
          animationIterationCount: loop ? 'infinite' : '1',
        }}
        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—Ö–æ—Ç—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –¥–ª—è GIF)
        {...(!loop && { 'data-loop': 'false' })}
      />
    </div>
  )
}