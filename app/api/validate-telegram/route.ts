import { NextRequest, NextResponse } from 'next/server'
import { createHmac } from 'crypto'

/**
 * API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram initData
 * 
 * –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ HMAC –ø–æ–¥–ø–∏—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
 */

export async function POST(request: NextRequest) {
  try {
    const { initData, botToken } = await request.json()

    if (!initData) {
      return NextResponse.json(
        { valid: false, error: 'Missing initData' },
        { status: 400 }
      )
    }

    // –í development —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏
    if (process.env.NODE_ENV === 'development') {
      console.log('üîß Development mode: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞')
      return NextResponse.json({ 
        valid: true, 
        message: 'Development mode validation' 
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const token = botToken || process.env.TELEGRAM_BOT_TOKEN

    if (!token) {
      return NextResponse.json(
        { valid: false, error: 'Bot token not provided' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
    const isValid = validateTelegramData(initData, token)

    if (isValid) {
      console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã')
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const userData = parseTelegramData(initData)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      try {
        await validateUserSecurity(userData.user?.id, initData)
      } catch (securityError) {
        console.warn('üîí –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', securityError)
        return NextResponse.json(
          { valid: false, error: 'Security validation failed' },
          { status: 403 }
        )
      }

      console.log('üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData.user?.first_name, userData.user?.id)

      return NextResponse.json({ 
        valid: true,
        user: userData.user,
        auth_date: userData.auth_date
      })
    } else {
      console.warn('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ')
      return NextResponse.json(
        { valid: false, error: 'Invalid signature' },
        { status: 401 }
      )
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', error)
    return NextResponse.json(
      { valid: false, error: 'Validation failed' },
      { status: 500 }
    )
  }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
 */
function validateTelegramData(initData: string, botToken: string): boolean {
  try {
    const urlParams = new URLSearchParams(initData)
    const hash = urlParams.get('hash')
    
    if (!hash) {
      return false
    }

    // –£–±–∏—Ä–∞–µ–º hash –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    urlParams.delete('hash')

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É
    const sortedParams = Array.from(urlParams.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n')

    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const secretKey = createHmac('sha256', 'WebAppData').update(botToken).digest()

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    const signature = createHmac('sha256', secretKey).update(sortedParams).digest('hex')

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
    return signature === hash

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏:', error)
    return false
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ Telegram –∏–∑ —Å—Ç—Ä–æ–∫–∏ initData
 */
function parseTelegramData(initData: string) {
  const urlParams = new URLSearchParams(initData)
  const result: Record<string, any> = {}

  for (const [key, value] of urlParams) {
    if (key === 'user' || key === 'receiver' || key === 'chat') {
      try {
        result[key] = JSON.parse(decodeURIComponent(value))
      } catch {
        result[key] = value
      }
    } else if (key === 'auth_date') {
      result[key] = parseInt(value, 10)
    } else if (key !== 'hash') {
      result[key] = value
    }
  }

  return result
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
 */
function isDataFresh(authDate: number, maxAgeSeconds = 86400): boolean {
  const now = Math.floor(Date.now() / 1000)
  return (now - authDate) <= maxAgeSeconds
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –í–ù–£–¢–†–ï–ù–ù–Ø–Ø —Ñ—É–Ω–∫—Ü–∏—è - –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
 */
async function validateUserSecurity(userId: number, initData: string): Promise<boolean> {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
  // - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  // - Rate limiting
  // - Blacklist –ø—Ä–æ–≤–µ—Ä–∫–∞
  // - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ—Ç–∞
  
  console.log(`üîí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
  
  // –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const userData = parseTelegramData(initData)
  if (userData.auth_date && !isDataFresh(userData.auth_date)) {
    throw new Error('Auth data is too old')
  }

  return true
}