import { NextRequest, NextResponse } from 'next/server'
import { createHmac } from 'crypto'
import { exec } from 'child_process'
import { promisify } from 'util'

const execAsync = promisify(exec)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ GitHub
function verifyGitHubSignature(payload: string, signature: string, secret: string): boolean {
  const hmac = createHmac('sha256', secret)
  hmac.update(payload)
  const expectedSignature = `sha256=${hmac.digest('hex')}`
  return signature === expectedSignature
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function performUpdate() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...')
    
    // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å gracefully
    console.log('üì¶ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ GitHub...')
    await execAsync('git fetch origin main')
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const { stdout: currentCommit } = await execAsync('git rev-parse HEAD')
    const { stdout: latestCommit } = await execAsync('git rev-parse origin/main')
    
    if (currentCommit.trim() === latestCommit.trim()) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è')
      return { success: true, message: '–£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è' }
    }
    
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')
    
    // 3. –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await execAsync('cp -r .next .next.backup || true')
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await execAsync('git reset --hard origin/main')
    
    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...')
    await execAsync('npm ci --production=false')
    
    // 6. –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    console.log('üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...')
    await execAsync('npm run build')
    
    // 7. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...')
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PM2 –¥–ª—è graceful restart –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      await execAsync('pm2 reload aurora-website --update-env || pm2 restart aurora-website')
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ PM2')
    } catch (pm2Error) {
      // –ï—Å–ª–∏ PM2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      console.log('‚ö†Ô∏è PM2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫')
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ñ–ª–∞–≥ –¥–ª—è graceful restart
      await execAsync('touch .update-flag')
      
      // –î–∞–µ–º —Å–∏–≥–Ω–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
      if (process.env.NODE_ENV === 'production') {
        setTimeout(() => {
          process.kill(process.pid, 'SIGUSR2')
        }, 1000)
      }
    }
    
    // 8. –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    await execAsync('rm -rf .next.backup')
    
    console.log('üéâ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
    return { success: true, message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    try {
      await execAsync('rm -rf .next && mv .next.backup .next')
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    } catch (restoreError) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', restoreError)
    }
    
    return { success: false, message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}` }
  }
}

export async function POST(request: NextRequest) {
  try {
    const payload = await request.text()
    const signature = request.headers.get('x-hub-signature-256')
    const event = request.headers.get('x-github-event')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–∞
    const webhookSecret = process.env.GITHUB_WEBHOOK_SECRET
    if (!webhookSecret) {
      console.error('‚ùå GITHUB_WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return NextResponse.json(
        { error: 'Webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      )
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if (!signature || !verifyGitHubSignature(payload, signature, webhookSecret)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook')
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' },
        { status: 401 }
      )
    }
    
    const data = JSON.parse(payload)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ push —Å–æ–±—ã—Ç–∏—è –≤ –≥–ª–∞–≤–Ω—É—é –≤–µ—Ç–∫—É
    if (event === 'push' && data.ref === 'refs/heads/main') {
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω push –≤ main –≤–µ—Ç–∫—É –æ—Ç ${data.pusher.name}`)
      console.log(`üí¨ –ö–æ–º–º–∏—Ç: ${data.head_commit.message}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π
      const skipDeploy = data.head_commit.message.includes('[skip deploy]') || 
                        data.head_commit.message.includes('[skip ci]')
      
      if (skipDeploy) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –ø–æ –º–µ—Ç–∫–µ –≤ –∫–æ–º–º–∏—Ç–µ')
        return NextResponse.json({ message: '–î–µ–ø–ª–æ–π –ø—Ä–æ–ø—É—â–µ–Ω' })
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      performUpdate().then(result => {
        console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result)
      }).catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      })
      
      return NextResponse.json({ 
        message: '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
        commit: data.head_commit.id.substring(0, 7),
        author: data.head_commit.author.name
      })
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    return NextResponse.json({ message: 'Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

// –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ - —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
export async function GET() {
  return NextResponse.json({ 
    status: 'ok',
    service: 'GitHub Webhook Handler',
    timestamp: new Date().toISOString()
  })
} 