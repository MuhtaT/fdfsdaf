"use client"

import { type PropsWithChildren, useEffect, useState } from "react"
import { init, miniApp, themeParams, viewport } from "@telegram-apps/sdk-react"
import { TelegramMockEnv } from "./TelegramMockEnv"
import { ErrorBoundary } from "./ErrorBoundary"

/**
 * Props –¥–ª—è TelegramProvider
 */
interface TelegramProviderProps extends PropsWithChildren {
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ mock –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ Telegram
   * @default true –≤ development —Ä–µ–∂–∏–º–µ
   */
  enableMock?: boolean
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK
 */
function TelegramSDKInitializer({ children }: PropsWithChildren) {
  const [isReady, setIsReady] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)

  useEffect(() => {
    const initializeTelegramApp = async () => {
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram SDK v3.x...')
        
        // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK (—Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        init()
        console.log('‚úÖ SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')

        // ‚úÖ –ú–æ–Ω—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        try {
          if (miniApp.mountSync && miniApp.mountSync.isAvailable()) {
            miniApp.mountSync()
            console.log('‚úÖ MiniApp —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω (sync)')
          } else if (miniApp.mount && miniApp.mount.isAvailable()) {
            await miniApp.mount()
            console.log('‚úÖ MiniApp —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω (async)')
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è MiniApp –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error)
        }

        try {
          if (themeParams.mountSync && themeParams.mountSync.isAvailable()) {
            themeParams.mountSync()
            console.log('‚úÖ ThemeParams —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã (sync)')
          } else if (themeParams.mount && themeParams.mount.isAvailable()) {
            await themeParams.mount()
            console.log('‚úÖ ThemeParams —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã (async)')
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è ThemeParams –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error)
        }

        try {
          if (viewport.mount && viewport.mount.isAvailable()) {
            viewport.mount()
            console.log('‚úÖ Viewport —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω')
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Viewport –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error)
        }

        setIsInitialized(true)

        // ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (miniApp && miniApp.isMounted()) {
          try {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            if (miniApp.ready && miniApp.ready.isAvailable()) {
              miniApp.ready()
              console.log('‚úÖ MiniApp –≥–æ—Ç–æ–≤')
            }

            // ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã
            const bgColor = themeParams.backgroundColor ? themeParams.backgroundColor() : undefined
            const headerBgColor = themeParams.headerBackgroundColor ? themeParams.headerBackgroundColor() : undefined

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –º–µ—Ç–æ–¥—ã
            if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
              const webApp = window.Telegram.WebApp
              try {
                if (bgColor) {
                  webApp.setBackgroundColor(bgColor)
                  console.log('‚úÖ –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', bgColor)
                }
                if (headerBgColor) {
                  webApp.setHeaderColor(headerBgColor)
                  console.log('‚úÖ –¶–≤–µ—Ç —Ö–µ–¥–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', headerBgColor)
                }
                
                // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                webApp.enableClosingConfirmation()
                console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω–æ')
              } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ WebApp:', error)
              }
            }

            console.log('‚úÖ Telegram Mini App —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
          } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MiniApp:', error)
          }
        }

        // ‚úÖ –†–∞—Å—à–∏—Ä—è–µ–º viewport –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if (viewport && viewport.isMounted()) {
          try {
            if (viewport.expand && viewport.expand.isAvailable()) {
              viewport.expand()
              console.log('‚úÖ Viewport —Ä–∞—Å—à–∏—Ä–µ–Ω')
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å viewport:', error)
          }
        }

        setIsReady(true)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:', error)
        setIsReady(true) // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      }
    }

    initializeTelegramApp()
  }, [])

  if (!isReady) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-white dark:bg-neutral-900">
        <div className="flex flex-col items-center space-y-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <p className="text-sm text-neutral-600 dark:text-neutral-400">
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App...
          </p>
        </div>
      </div>
    )
  }

  return <>{children}</>
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è Telegram Mini App
 */
export function TelegramProvider({ children, enableMock }: TelegramProviderProps) {
  const [shouldShowMock, setShouldShowMock] = useState(false)

  useEffect(() => {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ boolean
    const isInTelegram = typeof window !== 'undefined' && 
      !!(window.Telegram?.WebApp || 
         window.parent !== window || 
         window.location.search.includes('tgWebAppData'))

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      isInTelegram,
      hasTelegramWebApp: !!(typeof window !== 'undefined' && window.Telegram?.WebApp),
      isInIframe: typeof window !== 'undefined' && window.parent !== window,
      hasInitData: typeof window !== 'undefined' && window.location.search.includes('tgWebAppData'),
      enableMock,
      isDevelopment: process.env.NODE_ENV === 'development'
    })

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mock —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ Telegram –∏ –≤–∫–ª—é—á–µ–Ω enableMock
    if (!isInTelegram && (enableMock ?? process.env.NODE_ENV === 'development')) {
      console.log('üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Telegram mock')
      setShouldShowMock(true)
    } else {
      setShouldShowMock(false)
    }
  }, [enableMock])

  return (
    <ErrorBoundary>
      {shouldShowMock && <TelegramMockEnv />}
      
      <TelegramSDKInitializer>
        {children}
      </TelegramSDKInitializer>
    </ErrorBoundary>
  )
}

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
 */
export function useIsTelegramEnvironment(): boolean {
  const [isInTelegram, setIsInTelegram] = useState(false)

  useEffect(() => {
    const checkEnvironment = () => {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ boolean
      const result = typeof window !== 'undefined' && 
        !!(window.Telegram?.WebApp || 
           window.parent !== window || 
           window.location.search.includes('tgWebAppData'))
      
      console.log('üîç Telegram environment check:', {
        result,
        hasTelegramWebApp: !!(typeof window !== 'undefined' && window.Telegram?.WebApp),
        isInIframe: typeof window !== 'undefined' && window.parent !== window,
        hasInitData: typeof window !== 'undefined' && window.location.search.includes('tgWebAppData')
      })
      
      return result
    }

    setIsInTelegram(checkEnvironment())
  }, [])

  return isInTelegram
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export function useTelegramSDKStatus() {
  const [status, setStatus] = useState({
    miniAppMounted: false,
    themeParamsMounted: false,
    viewportMounted: false,
  })

  useEffect(() => {
    const checkStatus = () => {
      setStatus({
        miniAppMounted: miniApp.isMounted(),
        themeParamsMounted: themeParams.isMounted(),
        viewportMounted: viewport.isMounted(),
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 100ms –ø–æ–∫–∞ –≤—Å–µ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
    const interval = setInterval(() => {
      checkStatus()
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–≥–¥–∞ –≤—Å–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
      if (miniApp.isMounted() && themeParams.isMounted() && viewport.isMounted()) {
        clearInterval(interval)
      }
    }, 100)

    return () => clearInterval(interval)
  }, [])

  return status
}